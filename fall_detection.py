import cv2
import datetime
import requests
import threading
from flask import Flask, Response
from pyngrok import ngrok
from ultralytics import YOLO

# --- 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
DISCORD_WEBHOOK_URL = 'https://discord.com/api/webhooks/1336548845366280192/EWhYThzReXkCtjmQL8E5f5IosXsjc3_a8iz6cAe2vzkvpc0SOjE9EvW_jH28xvE9BSPc'
NGROK_AUTHTOKEN = "32Uz6XpcNrUdL3e5xxe9IkgyqAn_R2daSUgAGf89rpcVpbcw"
model = YOLO("best.pt")
cap = cv2.VideoCapture(1)
if not cap.isOpened():
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    exit()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask app ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
app = Flask(__name__)
output_frame = None
lock = threading.Lock()
falling_detected = False

# --- 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ---
def process_video_feed():
    global output_frame, falling_detected
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πá‡∏ô 416x224 (height, width)
        results = model(frame, imgsz=(224, 416)) 

        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡∏ö‡∏ô‡∏†‡∏≤‡∏û (‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏à‡∏∞‡∏ß‡∏≤‡∏î‡∏ö‡∏ô 'frame' ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ)
        annotated_frame = results[0].plot()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°
        found_falling_this_frame = False
        if results[0].boxes:
            for box in results[0].boxes:
                class_id = int(box.cls[0])
                class_name = model.names[class_id]
                if class_name.lower() in ["fall-down", "falling"]:
                    found_falling_this_frame = True
                    break
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°
        if found_falling_this_frame and not falling_detected:
            print("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô...")
            falling_detected = True
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            image_path = f"fall_{timestamp}.jpg"
            cv2.imwrite(image_path, annotated_frame)
            send_image_to_discord(image_path, "üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°!")
        elif not found_falling_this_frame:
            falling_detected = False

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏°
        with lock:
            _, buffer = cv2.imencode('.jpg', annotated_frame)
            output_frame = buffer.tobytes()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å
        cv2.imshow("Live Fall Detection (Local Preview)", annotated_frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            print("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á...")
            break
            
    cap.release()
    cv2.destroyAllWindows()

def send_image_to_discord(image_path, message):
    try:
        with open(image_path, 'rb') as f:
            files = {'file': f}
            data = {'content': message}
            response = requests.post(DISCORD_WEBHOOK_URL, files=files, data=data)
            if response.status_code == 204 or response.status_code == 200:
                print("‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ Discord: {e}")

# --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ú‡πà‡∏≤‡∏ô Flask ---
def generate_stream():
    global output_frame
    while True:
        if not cap.isOpened():
             break
        with lock:
            if output_frame is None:
                continue
            frame = output_frame
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/video')
def video_feed():
    return Response(generate_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/')
def index():
    return """
    <html>
        <head><title>CCTV-FallGuard</title>
            <style>
                body { font-family: sans-serif; text-align: center; background-color: #2c3e50; color: white; }
                img { max-width: 90%; margin-top: 20px; border: 3px solid #3498db; border-radius: 8px; }
            </style>
        </head>
        <body>
            <h1>üé• CCTV-FallGuard</h1>
            <img src="/video">
        </body>
    </html>
    """

# --- 4. ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ---
if __name__ == '__main__':
    processing_thread = threading.Thread(target=process_video_feed)
    processing_thread.daemon = True
    processing_thread.start()

    try:
        ngrok.set_auth_token(NGROK_AUTHTOKEN)
        public_url = ngrok.connect(5000)
        print("=====================================================")
        print(f"üåç ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: {public_url}")
        print("üíª ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        print("üî¥ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'q' ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("=====================================================")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ngrok ‡πÑ‡∏î‡πâ: {e}")
        exit()
        
    app.run(host="0.0.0.0", port=5000)